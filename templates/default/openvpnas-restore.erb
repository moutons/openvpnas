#!/usr/bin/env bash

# Generated by Chef

# ./usr/local/openvpn_as/scripts/sqlite3 [DB_FILE] < [TEXT_FILE]

# /usr/local/openvpn_as/etc
# certs.db
# config.db
# log.db
# userprop.db

OPENVPNAS_DIR=<%= node['openvpnas']['dir'] %>
BACKUP_DIR=/tmp/openvpnas_backup
RESTORE_BUCKET=<%= node['openvpnas']['backup']['bucket'] %>
RESTORE_DIR=/tmp/openvpnas_restore

echo 'starting restore'
echo

echo 'this will remove current config'
read -r -p "Are you sure? [y/N] " response
case $response in
    [yY][eE][sS]|[yY])
    ;;
  *)
    exit 0
    ;;
esac

if [ -f $OPENVPNAS_DIR/RESTORED ]; then
  echo 'existing restore found, aborting!'
  exit 1
fi

# make a temporary restore directory
mkdir -p $RESTORE_DIR
cd $RESTORE_DIR

# download the latest backup
#RESTORE_NAME=$(/usr/local/bin/aws s3 ls s3://$RESTORE_BUCKET | grep -o 'openvpnas-backup[^\n]*' | tail -1)
#/usr/local/bin/aws s3 cp s3://$RESTORE_BUCKET/$RESTORE_NAME openvpnas-backup.tar.gz

RESTORE_NAME=$(ls -1 $BACKUP_DIR | grep -o 'openvpnas-backup[^\n]*' | tail -1)
cp $BACKUP_DIR/$RESTORE_NAME openvpnas-backup.tar.gz

# extract the backup to the temp dir

tar zxf openvpnas-backup.tar.gz .

# stop openvpnas
/etc/init.d/openvpnas stop

rm -f $OPENVPNAS_DIR/etc/db/*.db

# iterate the database files
for DBNAME in *.db.dump
do
  echo "restoring $DBNAME"
  $OPENVPNAS_DIR/scripts/sqlite3 $OPENVPNAS_DIR/etc/db/${DBNAME%.dump} < $DBNAME
done

# start openvpnas
/etc/init.d/openvpnas start

# delete the temporary restore directory
rm -rf $RESTORE_DIR

# create a flag so we know not to restore over top
touch $OPENVPNAS_DIR/RESTORED

echo 'restore complete'
